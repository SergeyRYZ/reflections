Using FC to find bugs can help us focus only on the parts of code
that have changed since the last stable version. This, in turn,
allow us to save effort and time in reviewing the potential errors.

How could having easy access to the entire history of a file make you a more efficient programmer in the long term?

It can allow me to look back at all of my previous work and see
how different decisions and practices affected the outcome. By
seeing this I can further understand what way is the best for me.

What do you think are the pros and cons of manually choosing when to create a commit, like you do in Git, vs having versions automatically saved, like Google Docs does?

The most obvious pro is being able to control it precisely - which
makes following the version history very easy. However, that does
require discipline, so at the beginning the manually saved commits
can be too infrequent and too big.

Why do you think some version control systems, like Git, allow saving multiple files in one commit, while others, like Google Docs, treat each file separately?

Git was designed to work on code - which often spans across multiple
files depending on the complexity of a project. That is why it's 
important to see what files have been changed in each separate version.

How can you use the commands git log and git diff to view the history of files?

You can use git log to view the history of commits, from the most
recent backwards. Git diff allows us to compare two commits to see
what exactly has been changed.

How might using version control make you more confident to make changes that could break something?

Being able to track versions and quickly and completely revert to the
previous stable version will make it safe to try different things in the
code.

Now that you have your workspace set up, what do you want to try using Git for?

Definitely will try to use proper version control in my new Android projects,
as well as maybe a libgdx game I'm planning to try as well.

